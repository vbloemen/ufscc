//                           -*- mode: doc; outline-regexp: "==\(=*\) ." -*-
ltsmin(7)
=========
:Author:  Stefan Blom
:Email:   <sccblom@cs.utwente.nl>
:Date:    2012-23-05


== NAME

ltsmin - Overview of the LTSmin toolset.

== SYNOPSIS

This man page provides an overview of the tools in the LTSmin toolset.

== Language Modules

The LTSmin toolset was designed to support multiple languages. All tools for
a specific language start with a prefix that indicates the language. Below,
we list the languages and the prefixes that are supported in this release:

DVE (+dve+)::

The DVE language.  See the
http://divine.fi.muni.cz/[DiVinE website].

ETF (+etf+)::

The Enumerated Table Format is an intermediate format for models in the LTSmin
toolset. See manpage:etf[5].

mCRL2 (+lps+)::

The mCRL2 language. See the
http://www.mcrl2.org/[mCRL2 website].

muCRL (+lpo+)::

The muCRL language. See the
http://www.cwi.nl/~mcrl/[muCRL website].

Promela (+prom+)::

The Promela language is supported via the included version of SpinS,
which generates C code implementing the PINS interface. See
http://spinroot.com/[Spin website]
and 
http://dx.doi.org/10.1016/j.entcs.2013.07.007[SpinS: Extending LTSmin with Promela through SpinJa].

UPPAAL (+opaal+)::
The UPPAAL xml language for timed automata is supported via the opaal
successor generator. Currently only multi-core reachability is supported
(manpage:opaal2lts-mc[1]).
See the opaal website:
https://code.launchpad.net/~opaal-developers/opaal/opaal-ltsmin-succgen[opaal website]

PBES (+pbes+)::
Specifications in _pbes_ format generated by manpage:lps2pbes[1] are
reduced to parity games. These can then be solved (symbolically) by
manpage:spgsolver[1].

C-code (+pins+)::
LTSmin enables linking to language modules provided as +.so+-files. The file
+dlopen-api.h+ needs to be included in the C-code. 
The +pins2lts+ tools will load the binary at runtime. 
See manpage:pins2lts-seq[1], manpage:pins2lts-mc[1], manpage:pins2lts-dist[1], manpage:pins2lts-sym[1]. 

== State Space Exploration and Analysis Tools

The LTSmin toolset has four different tools for reachability,
checking for deadlocks, actions and invariants and verification of properties
in Linear Temporal Logic (LTL) or modal mu-calculus.

<prefix>2lts-sym::
Symbolic tools that use decision diagrams for manipulating sets
of states. The optional output produced by these tools is an ETF model.
+
See manpage:dve2lts-sym[1], manpage:etf2lts-sym[1],
manpage:lps2lts-sym[1], manpage:lpo2lts-sym[1],
manpage:pbes2lts-sym[1],
manpage:mapa2lts-sym[1]
and manpage:prom2lts-sym[1].
+
To use multi-core decision diagrams, choose either Sylvan or LDDmc as 
DD package using the +--vset+ option. 

<prefix>2lts-seq::

Sequential tools that enumerate states and can use
both decision diagrams and (tree-compressed) hash tables to represent sets of
states. The optional output produced by these tools is an explicit LTS.
These tools are based on an extended version of the
http://dx.doi.org/10.1007/s10009-008-0093-y[General State Exploring
Algorithm (GSEA)].
+
See manpage:dve2lts-seq[1], manpage:etf2lts-seq[1],
manpage:lps2lts-seq[1], manpage:lpo2lts-seq[1],
manpage:pbes2lts-seq[1]
and manpage:prom2lts-seq[1].

<prefix>2lts-mc::

Concurrent (multi-core) state space generators and model checkers.
Enumeration uses lockless (tree-compressed) hash tables to represent sets of
states. Model checking of LTL is supported by a set of multi-core NDFS
algorithms. To input LTL-formulae, one can use the PINS2PINS wrapper (--ltl)
or an LTL cross-product computed by the frontend (DiVinE 2 property models or
PROMELA models via SpinS with never claim). 
+
See manpage:dve2lts-mc[1], manpage:etf2lts-mc[1],
manpage:lps2lts-mc[1], manpage:lpo2lts-mc[1],
manpage:pbes2lts-mc[1],
manpage:opaal2lts-mc[1], manpage:prom2lts-mc[1]
and manpage:ltsmin-ltl[5].
+
--
* MacOS X only supports the multiple process architecture from version
10.7 (Lion).
--
+
<prefix>2lts-dist::

Distributed state space generators that enumerate states and use
distributed hash tables for storing sets of states.
The optional output produced by these tools is an explicit LTS.
These tools work with MPI, multiple threads or multiple process whenever possible and available.
For example:
+
--
* MacOS X does not support the multiple process architecture at this time.
--
+
See manpage:dve2lts-dist[1], manpage:etf2lts-dist[1],
manpage:lps2lts-dist[1], manpage:lpo2lts-dist[1], 
manpage:pbes2lts-dist[1],
manpage:mapa2lts-dist[1],
manpage:nips2lts-dist[1],
and manpage:spinja2lts-dist[1]

== Pins-to-pins wrappers

Most of the analysis tools offer the following options, which are implemented as 
a layer between the language modules and the analysis algoritms.

caching::
Enable transition caching with the +-c+ option.

regrouping::
Choose regrouping and reordering heuristics with the +-r+ option.
The following regroup macros are available.
include::inc/regroup-options.txt[]

partial order reduction::
Enable POR with the +--por+ option.

ltl::
Generate a BÃ¼chi automaton and enable detection of accepting cycles
with the +--ltl+ option.
Only available in the +*2lts-seq+ and +*2lts-mc+ tools.
See manpage:ltsmin-ltl[5].

mu-calculus::
Generate a parity game with the +--mucalc+ option.
See manpage:ltsmin-mucalc[5].


== State Space Reduction Tools

The LTSmin toolset provides distributed minimization with respect to various bisimulations.

ltsmin-reduce::
Sequential minimization modulo strong and branching bisimulation, as well as
modulo lumping of CTMCs.
See manpage:ltsmin-reduce[1].

ltsmin-reduce-dist::
Distributed minimization modulo strong and branching bisimulation.
This tool has an implementation of the new inductive signature algorithms
that work on tau-cycle free LTSs.
See manpage:ltsmin-reduce-dist[1].

ltsmin-compare::
Compare two transitions systems, using the same equivalences as supported by
ltsmin-reduce.
See manpage:ltsmin-compare[1].

== Tau Cycle Elimination Tool

The LTSmin toolset provides distributed tau-cycle elimination.

ce-mpi::
Distributed tau cycle elimination.
See manpage:ce-mpi[1].

== TorX RPC interfaces

The LTSmin toolset provides TorX RPC interfaces.

<prefix>2torx::
TorX RPC interface.
+
See manpage:dve2torx[1], manpage:etf2torx[1],
manpage:lps2torx[1], manpage:lpo2torx[1],
and manpage:prom2torx[1].

== Trace Pretty Printing

ltsmin-printtrace::
Pretty print traces. See manpage:ltsmin-printtrace[1].

== Conversion Tools

etf-convert::
Translate ETF to DVE. See manpage:etf-convert[1].

ltsmin-convert::
Convert LTS file formats. See manpage:ltsmin-convert[1].

gcf::
Utility for creating and extracting 'Generic Container Format' archives.
See manpage:gcf[1].

include::inc/file-formats.txt[]

== Mini Tutorial

As running example, we use a model of the bounded retransmission
protocol from the mCRL examples. Assuming we have copied the file
'brp.mcrl' to our working directory, we can linearize the model with
the following command:
----
mcrl -regular -nocluster brp.mcrl
----
This produces a file named 'brp.tbf'. This is the input for the state
space generator. Just to see how many states and transitions are produced,
we can run the command
----
lpo2lts-seq brp.tbf
----
Assuming that the model is small and CADP is installed, we can simply generate a BCG file
(this requires BFS exploration order)
----
lpo2lts-seq --strategy=bfs brp.tbf brp.bcg
----
and then use CADP.

If it turns out that the LTS was very big then we might want to use the distributed tools
to generate and reduce the LTS:
----
lpo2lts-dist --workers=4 brp.tbf brp.dir
ltsmin-reduce-dist --workers=4 brp.dir brp-s.dir
ltsmin-convert --rdwr --segments 1 brp-s.dir brp-s.bcg
----

The tools start the command 'mpirun' silently in the background with the
suitable options.
Alternatively, one may wish to call 'mpirun' with additional options. This can
be done using the '--mpi' option, e.g.:

----
mpirun -np 4 -mca btl tcp,self lpo2lts-dist --mpi brp.tbf brp.dir
----

The dir format used to store the LTS in the example is backwards compatible with the mCRL toolset.
We also support a newer format that adds compression:
----
lpo2lts-dist --workers=4 brp.tbf brp.gcf
ltsmin-reduce-dist --workers=4 brp.gcf brp-s.gcf
ltsmin-convert --rdwr --segments 1 brp-s.gcf brp-s.bcg
----

When the model is suitable, state space generation can be speeded up by memoizing next state calls:
----
lpo2lts-dist --workers=4 --cache brp.tbf brp.gcf
----

=== Symbolic tools

The LTSmin toolset also has a symbolic reachability tool.
If we want to know the number of states, we can give the command:

----
lpo2lts-sym brp.tbf
----

This command will compute the necessary part of the transition relation and the
set of reachable states. If we want to record the transition relation symbolically
then we can do so in the form of an ETF file:

----
lpo2lts-sym brp.tbf brp.etf
----

This etf file can be translated to DVE for model checking:
----
etf-convert brp.etf brp.dve
----

It can also serve as the input for state space generation
----
etf2lts-dist --workers=4 brp.etf brp-s.gcf
----

=== Parity game solver

The LTSmin toolset finally includes a parity game solver:
----
etf2lts-sym --mucalc=property.mcf model.etf --pg-write=game.spg
spgsolver game.spg
----

To tool reports whether the game successfully terminates.
