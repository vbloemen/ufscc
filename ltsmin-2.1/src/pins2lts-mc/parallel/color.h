#ifndef COLOR_H
#define COLOR_H

#include <mc-lib/dbs-ll.h>
#include <mc-lib/trace.h>

/**
 * Different implementations of NDFS state colorings.
 *
 * Not an object, not necessary.
 */


/* NDFS uses two colors which are independent of each other.
 * Blue: bit 0) A state that has finished its blue search and has not yet been reached
 *             in a red search
 * Red:  bit 1) A state that has been considered in both the blue and the red search
 */
typedef struct {
  int n;
} ndfs_color_t;

enum { IBLUE=0, IRED=1 };
#define NCOLOR(c)  (ndfs_color_t){ .n = (c) }
#define NBLUE      NCOLOR(IBLUE) // bit 0
#define NRED       NCOLOR(IRED)  // bit 1

/**
 * NNDFS state colors are encoded using one bitset, where two consecutive bits
 * describe four colors: (thus state 0 uses bit 0 and 1, state 1, 2 and 3, ..)
 * Colors:
 * While: 0 0) first generated by next state call
 * Blue:  0 1) A state that has finished its blue search and has not yet been reached
 *             in a red search
 * Pink:  1 0) A state that has been considered in both the blue and the red search
 * Cyan:  1 1) A state whose blue search has not been terminated
 *
 * In MC-NDFS, Pink states are the ones on the stack of dfs_red
 */
// "typesafe" enum
typedef struct {
  int nn;
} nndfs_color_t;

enum { WHITE=0, BLUE=1, PINK=2, CYAN=3 };
#define NNCOLOR(c) (nndfs_color_t){ .nn = (c) }
#define NNWHITE    NNCOLOR(WHITE) // value: 00
#define NNBLUE     NNCOLOR(BLUE)  // value: 01
#define NNPINK     NNCOLOR(PINK)  // value: 10
#define NNCYAN     NNCOLOR(CYAN)  // value: 11

/* Global state colors are encoded in the state database as independent bits.
 * All threads are sensitive too them.
 *
 * Colors:
 * Green: bit 0) A state that globally is does not have to be considered in
 *               the blue search anymore.
 * Yellow:bit 1) A state that globally is does not have to be considered in
 *               the Red search anymore.
 */
typedef struct {
  int g;
} global_color_t;

enum { RED=0, GREEN=1, DANGEROUS=2 };
#define GCOLOR(c)  (global_color_t){ .g = (c) }
#define GRED       GCOLOR(RED)      // bit 0
#define GGREEN     GCOLOR(GREEN)    // bit 1
#define GDANGEROUS GCOLOR(DANGEROUS)// bit 2

extern nndfs_color_t    nn_get_color (bitvector_t *set, ref_t ref);

extern int      nn_set_color (bitvector_t *set, ref_t ref, nndfs_color_t color);

extern int      nn_color_eq (const nndfs_color_t a, const nndfs_color_t b);

extern int      ndfs_has_color (bitvector_t *set, ref_t ref, ndfs_color_t color);

extern int      ndfs_try_color (bitvector_t *set, ref_t ref, ndfs_color_t color);

#endif
