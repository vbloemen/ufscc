
byte req[13];
int t,p;
byte v;

process cabin
{
  state idle,mov,open;
  init idle;
  trans
	idle -> mov  {guard v>0;},
	mov -> open  {guard t==p;},
	mov -> mov   {guard t<p; effect p=p-1;},
	mov -> mov   {guard t>p; effect p=p+1;},
	open -> idle {effect req[p]=0,v=0;}
  ;
}

process environment 
{
  state read;
  init read;
  trans
	read -> read {guard req[0]==0; effect req[0]=1;} ,
	read -> read {guard req[1]==0; effect req[1]=1;} ,
	read -> read {guard req[2]==0; effect req[2]=1;} ,
	read -> read {guard req[3]==0; effect req[3]=1;} ,
	read -> read {guard req[4]==0; effect req[4]=1;} ,
	read -> read {guard req[5]==0; effect req[5]=1;} ,
	read -> read {guard req[6]==0; effect req[6]=1;} ,
	read -> read {guard req[7]==0; effect req[7]=1;} ,
	read -> read {guard req[8]==0; effect req[8]=1;} ,
	read -> read {guard req[9]==0; effect req[9]=1;} ,
	read -> read {guard req[10]==0; effect req[10]=1;} ,
	read -> read {guard req[11]==0; effect req[11]=1;} ,
	read -> read {guard req[12]==0; effect req[12]=1;} 
  ;
}


process controller
{
  byte ldir;
  state wait,work,done;
  init wait;
  trans
    wait -> work {guard v==0; effect t=t+(2*ldir)-1;},
    work -> wait {guard t<0 || t==13; effect ldir=1-ldir;},
    work -> done {guard t>=0 && t<13 && req[t]==1;},
    work -> work {guard t>=0 && t<13 && req[t]==0; effect t=t+(2*ldir)-1;},
    done -> wait {effect v=1;}
  ;
}

system async;









